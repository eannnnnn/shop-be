/**
 * @packageDocumentation
 * @module api.functional.account
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { AccountDto } from "../../../domains/account/dto/account.dto";
import type { CreateAccountDto } from "../../../domains/account/dto/create-account.dto";
import type { HealthResponseDto } from "../../../domains/account/dto/health-response.dto";
import type { UpdateAccountDto } from "../../../domains/account/dto/update-account.dto";

/**
 * @controller AccountController.health
 * @path GET /account/health
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function health(connection: IConnection): Promise<health.Output> {
  return PlainFetcher.fetch(connection, {
    ...health.METADATA,
    template: health.METADATA.path,
    path: health.path(),
  });
}
export namespace health {
  export type Output = HealthResponseDto;

  export const METADATA = {
    method: "GET",
    path: "/account/health",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/account/health";
}

/**
 * @controller AccountController.create
 * @path POST /account
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createAccountDto: create.Body,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    createAccountDto,
  );
}
export namespace create {
  export type Body = CreateAccountDto;
  export type Output = AccountDto;

  export const METADATA = {
    method: "POST",
    path: "/account",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/account";
}

/**
 * @controller AccountController.findOne
 * @path GET /account/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOne(
  connection: IConnection,
  id: string,
): Promise<findOne.Output> {
  return PlainFetcher.fetch(connection, {
    ...findOne.METADATA,
    template: findOne.METADATA.path,
    path: findOne.path(id),
  });
}
export namespace findOne {
  export type Output = AccountDto;

  export const METADATA = {
    method: "GET",
    path: "/account/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/account/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * @controller AccountController.update
 * @path PUT /account/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string,
  updateAccountDto: update.Body,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(id),
    },
    updateAccountDto,
  );
}
export namespace update {
  export type Body = UpdateAccountDto;
  export type Output = AccountDto;

  export const METADATA = {
    method: "PUT",
    path: "/account/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/account/${encodeURIComponent(id?.toString() ?? "null")}`;
}
